{
  "name": "n-util",
  "description": "JavaScript's missing methods",
  "version": "0.0.1",
  "homepage": "http://github.com/kriskowal/util/",
  "author": {
    "name": "Kris Kowal",
    "email": "kris@cixar.com",
    "url": "http://github.com/kriskowal/"
  },
  "main": "lib/util.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/kriskowal/util/"
  },
  "bugs": {
    "mail": "kris@cixar.com",
    "url": "http://github.com/kriskowal/util/issues"
  },
  "engines": {
    "node": ">=0.2.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/kriskowal/util/raw/master/LICENSE"
    }
  ],
  "readme": "\n\nProvides the missing methods for JavaScript\n\n - usable as a CommonJS module, in Node\n - usable as a <script> in all web browsers\n\n\nFor Node:\n\n    $ curl http://npmjs.org/install.sh | sh\n    $ npm install n-util\n\n\nAs a CommonJS module:\n\n    var UTIL = require(\"n-util\");\n    UTIL.unique([1, 1, 2, 3, 3, 4]);\n\n\nAs a <script src=\"n-util.js\"></script>:\n\n    UTIL.unique([1, 1, 2, 3, 3, 4]);\n\n\nTHE API\n\n\n    no(value)\n        returns whether value is null or undefined,\n        thus whether it is not safe to grab properties.\n\n    object(value)\n        converts values to objects\n        \n        - returns value.toObject() if available in the object's\n          prototype chain but not owned.\n        - creates shallow copies of objects\n        - converts sequences of [key, value] items into objects,\n          using the items(value) missing method\n          - any value can have items if it provides a\n            value.items() method.\n        - returns {} if value is undefined\n\n    array(value)\n        converts values to arrays\n\n        - creates shallow copies of all array-like objects,\n          including arguments and strings\n        - returns value.toArray() if available in the object's\n          prototype chain but not owned.\n        - uses value.forEach() if available in the object's\n          prototype chain but not owned.\n        - constructs arrays of [key, value] items from objects,\n          using the items(value) missing method\n          - any value can have items if it provides a\n            value.items() method.\n        - returns [] if value is undefined\n       \n    array.coerce(value)\n        returns Arrays unmodified, and uses array(value)\n        to convert all other values into arrays.\n        \n    isArrayLike(value)\n        returns whether the value is an array or arguments\n        object.\n\n    isArguments(value)\n        returns whether the given value is an arguments\n        object.\n\n    string(value)\n        converts a value to a string.\n        - converts null and undefined to an empty string.\n        - uses value.toString() if available in the polymorphic\n          chain and not owned.\n        - uses value.valueOf().toString() generally.\n\n    copy(value)\n        creates a shallow copy for the following values:\n        - null (null)\n        - undefined (undefined)\n        - array-like objects (as arrays)\n        - dates (passed through)\n        - objects (only owned properties reflected,\n          no prototype copy)\n\n        array.copy or object.copy are available if the type of the\n        value is known and non-polymorphic.\n\n    deepCopy(value)\n        creates a deep copy of a given value, recursing on arrays an\n        objects, not replicating prototype chains or non-owned\n        values.\n\n        Use array.deepCopy or object.deepCopy if the type\n        is known and polymorphism would be wasteful.\n   \n    keys(object)\n        returns an array of owned keys for both objects and array-like\n        objects.  the keys of an array are the range(0, object.length)\n\n        Use object.keys if the type of object is known and\n        polymorphism would be wasteful.\n\n    values(object)\n        returns an array of the owned values of both objects and\n        array-like objects.  the values of an array is a shallow\n        copy of the array.\n\n        Use object.values if the type of object is known\n        and polymorphism would be wasteful.\n        \n    items(object)\n        returns an array of the owned [key, value] items of the given\n        object.  the items of an array are an enumeration of\n        [offset, index] for indexes in the range(0, object.length)\n\n        Use object.items if the type of object is known and\n        polymorphism would be wasteful.\n\n    len(object)\n        returns the length of an array or object.  The\n        length of an object is the number of owned properties.\n        - uses object.len() if available in the object's prototype\n          chain.\n        - uses object.length if available\n\n        Use array.len or object.len if the type is known\n        and polymorphism would be wasteful.\n\n    has(object, value)\n        returns whether a given value is owned by an object.\n        - uses object.has(value) if available in the object's\n          prototype chain if not owned.\n        - curries on the value if partially applied.\n\n        Use array.has or object.has if the type is known\n        and polymorphism would be wasteful.\n\n    get(object, key, default_opt)\n        returns the value for a given key or offset in an object,\n        array, or string.  if the object does not own the key, or the\n        offset is out of the array or string's range, returns the\n        default object.  `undefined` qualifies as an owned value if it\n        exists.  throws an error if the key does not exist\n        if no default is provided.  `undefined` qualifies as\n        a provided default; the argument must be literally\n        omitted to signal that a default should be used instead\n        of throwing an error.\n        - uses object.get(key, default_opt) if available in\n          the object's prototype chain if not owned.\n        - curries on the key and default value once if partially\n          applied.\n\n    set(object, key, value)\n        sets the value for a given key or offset in the\n        given object or array.\n        - returns the object for chainability.\n        - uses object.set(key, value) if available in the\n          object's prototype chain if not owned.\n        - curries on the key and then the value if partially\n          applied once or twice.\n        \n    getset(object, key, default_opt)\n        returns the value for a given key or offset in an object,\n        array, or string.  if the object does not own the key yet,\n        or the offset is out of an array's range, sets the value\n        before returning.  `undefined` qualifies as an owned\n        value if it exists.\n        - uses object.getset(key, default) if it exists.\n        - curries on the key and default value once if partially\n          applied.\n\n    del(object, key)\n    del(object, begin, end)\n        deletes the key or all values for a range of offsets\n        in a given object or array.\n        - returns the object for chainability.\n        - uses object.del(...) if provided in the prototype chain but\n          not owned.\n        - curries once on the key or range if partially applied.\n\n        Use array.del if the type is known and polymorphism\n        would be wasteful.\n\n    cut(object, key)\n        deletes the item for a given key from an object or\n        array and returns the corresponding value.\n        - uses object.cut(key) if available in the prototype\n          chain but not owned.\n        - curries on the key if partially applied.\n\n    put(object, key, value)\n        operates like set(object, key, value) for objects,\n        but displaces an offset if the object is an array,\n        such that all subsequent values are shifted right.\n        - returns object for chainability.\n        - uses object.put(key, value) if available on the prototype\n          chain but not if it is owned.\n        - curries on key and value if partially applied.\n\n        Use array.put if the type is known and polymorphism\n        would be wasteful.\n\n    first(value)\n        returns the value at the first offset of an array\n        or array-like object.\n        - use value.first() if available on the prototype chain\n          but not owned.\n\n        Use array.first if the type is known and polymorphism\n        would be wasteful.\n\n    last(value)\n        returns the value at the last offset of an array or\n        array-like object.\n        - use value.last() if available on the prototype chain\n          but not owned.\n\n        Use array.last if the type is known and polymorphism\n        would be wasteful.\n\n    update(object, other)\n        shallowly copies the owned values of other over the object.\n        - returns the object for chainability\n        - uses object.update(other) if available on the prototype\n          chain but not owned.\n        - curries on the other object once.\n\n        Use object.update if the type is known and polymorphism\n        would be wasteful.\n\n    deepUpdate(object, other)\n        deeply copies the owned values of other over this object,\n        recursing on arrays and object.\n        - uses object.deepUpdate(other) if available on the prototype\n          chain but not owned, recursively.\n        - returns the object for chainability\n        - curries on the other object once.\n\n        Use object.deepUpdate if the type is known and polymorphism\n        would be wasteful.\n\n    complete(object, other)\n        shallowly copies the owned values of other into this\n        object if such keys do not already exist.\n        - uses object.complete(other) if available on the prototype\n          chain but not owned, recursively.\n        - returns the object for chainability\n        - curries on the other object once.\n\n        Use object.complete if the type is known and polymorphism\n        would be wasteful.\n\n    deepComplete(object, other)\n        deeply copies the owned properties of other into this\n        object if such keys do not already exist.\n        - uses object.deepComplete(other) if available on the\n          prototype chain but not owned, recursively.\n        - returns the object for chainability.\n        - curries on the other object once.\n\n        Use object.deepComplete if the type is known and polymorphism\n        would be wasteful.\n\n    remove(object, value)\n        removes a value from an array (O(n)).\n        - uses object.remove(value) if available in the prototype\n          chain but not owned.\n\n    range(length)\n    range(start, stop)\n    range(start, stop, step)\n        - constructs an array of integers in the given range\n        - NOT polymorphic\n\n    forEach(array, callback, that_opt)\n        calls back on each value in the array, using\n        array.coerce, such that it can be used\n        to iterate over the items of objects or other\n        values that provide a toArray or forEach\n        method in their prototype chain after owned\n        properties.\n        \n        - returns the array for chainability\n\n    forEachApply(arrayOfArrays, callback, that_opt)\n        calls back variadically, using apply, using each\n        array.  uses array.coerce on the arrayOfArrays\n        such that it can be used to iterate over the items\n        of objects or other values that provide a toArray\n        or forEach method in their prototype chain after\n        owned properties.\n\n        forEachApply({\n            \"a\": 10,\n            \"b\": 20\n        }, function (key, value) {\n        })\n\n        - returns the array for chainability\n\n    map(array, callback, that_opt)\n        Analogous to forEach but returns the respective\n        values of each callback in an array.\n\n    mapApply(array, callback, that_opt)\n        Analogous to forEachApply but returns the respective\n        values of each callback in an array.\n\n    every(array, callback, that_opt)\n        Applies the callback to each value in the array\n        (after coercion) and returns whether all of\n        the returned values were truthy, shorting on\n        the first falsy value.\n        - curries on the callback and that object once.\n        - uses array.every(callback, that) if available\n          in the prototype chain but not owned.\n\n    some(array, callback, that_opt)\n        Applies the callback to each value in the array\n        (after coercion) and returns whether any of the\n        returned values were truthy, shorting on the\n        first truthy value.\n        - curries on the callback and that object once.\n        - uses array.some(callback, that) if available\n          in the prototype chain but not owned.\n       \n    all(array)\n        returns whether all of the values in the array\n        are truthy.\n        - uses array.all() if available in the prototype\n          chain but not owned.\n\n    any(array)\n        returns whether any value in the array is truthy.\n        - uses array.any() if available in the prototype\n          chain but not owned.\n\n    reduce(array, callback(accumulated, value, index, array), basis_opt)\n        reduces an array by iteratively accumulating the return value\n        of the callback, given the current accumulation and the next\n        value.  the first accumulated value is the basis or undefined.\n        - uses array.reduce if provided in the prototype chain and not\n          owned.\n\n    reduce(array, callback(accumulated, value, index, array), basis_opt)\n        reduces an array by iteratively accumulating the return value\n        of the callback, given the current accumulation and the\n        previous value.  the first accumulated value is the basis or\n        undefined.\n        - uses array.reduceRight if provided in the prototype chain\n          and not owned.\n\n    zip(...)\n        returns an array of the respective values of each argument,\n        coercing non-array values.\n\n    transpose(matrix)\n        returns the transpose of an array of arrays, such that\n        the rows and columns are swapped.  transpose is the\n        inverse of itself, and equivalent to zipping variadically.\n\n    enumerate(array, start_opt)\n        returns an array of [offset, value] items for the\n        values in a given array, array-like object, or\n        object converted to an array using toArray or forEach.\n        - start defaults to 0\n\n    is(a, b)\n        returns whether two objects are identical by reference.\n        unlike pure ===, \"is\" is reflexive and treats\n        negative and positive zero and infinity as distinct.\n\n    eq(a, b)\n        returns whether to values are deeply equal by type\n        and value.\n        - use a.eq(b) if available in the prototype chain and\n          not owned, recursively.\n        - curries on second value if partially applied.\n\n        Use array.eq or object.eq if the type is known\n        and polymorphism would be wasteful.\n\n    ne(a, b)\n        !eq(a, b)\n        - uses a.ne(b) if available in the prototype chain\n          and not owned.\n        - curries on the second value if partially applied.\n\n    lt(a, b)\n        returns whether a is less than b.  operates\n        on arrays recursively.\n        - uses a.lt(b) if available in the prototype chain\n          and not owned.\n        - curries on the second value if partially applied.\n\n        array.lt\n\n    gt(a, b)        \n        returns whether a is greater than b.\n        !(lt(a, b) || eq(a, b))\n        - uses a.gt(b) if available in the prototype chain\n          and not owned.\n        - curries on the second value if partially applied.\n\n    le(a, b)\n        returns whether a is less than or equal to b.\n        lt(a, b) || eq(a, b)\n        - uses a.le(b) if available in the prototype chain\n          and not owned.\n        - curries on the second value if partially applied.\n\n    ge(a, b)\n        returns whether a is greater than or equal to b.\n        lt(a, b) || eq(a, b)\n        - uses a.ge(b) if available in the prototype chain\n          and not owned.\n        - curries on the second value if partially applied.\n\n    mul(a, b)\n        multiplies numbers and strings by numbers.\n        - uses a.mul(b) if available in the prototype chain\n          and not owned.\n        - curries on the second value if partially applied.\n\n        Use string.mul(a, b) if a is known to be a string\n        and polymorphism is wasteful.\n\n    compare(a, b)\n        returns a number such that a as compared to be\n        is equivalent to that value as compared to 0.\n        for example, if a is less than b, compare will\n        return a value that is less than zero.\n        Operates on numbers, strings, and arrays recursively.\n        Object comparison always returns 0.\n        - uses a.compare(b) if available in the prototype\n          chain and not owned.\n        - curries on the second value if partially applied.\n\n    by(callback)\n        returns a comparator, like compare, that will compare\n        values based on the comparison of the value returned\n        by the callback.\n\n    sort(array, compare_opt)\n        sorts an array, using array.sort(compare), where compare\n        defaults to deep comparison.  Object comparison is stable.\n        \n        If by(relation) is used to generate the comparator, sort\n        applies a Schwartzian transform which renders higher\n        performance generally for arrays that are longer than 3 by\n        guaranteeing that the relation will only be used on each value\n        once.\n\n    sorted(array, compare_opt)\n        returns a sorted copy of given array, using the\n        given comparator, or the default comapre function above.\n\n    reverse(array)\n        reverses an array in place.\n\n    reversed(array)\n        returns a reversed copy of an array.\n\n    hash(object)\n        returns a string representing a \"hash\" of the given\n        object, suitable for slotting arbitrary objects\n        in another object for high-performance look-ups.\n        - uses object.hash() if available in the prototype chain\n          and not owned.\n        - defaults to stringifying the object, which will perform\n          poorly (O(n)) if used to slot objects.\n\n    unique(values, eq_opt, hash_opt)\n        returns an array that only contains each equivalent\n        object in values once.  Uses \"hash\" for higher performance\n        look-ups of numbers and objects that implement that method,\n        and uses \"eq\" to distinguish equivalent objects.\n        \"eq\" and \"hash\" can be independently overridden.\n\n    escape(string, strictlyForJson_opt)\n        escapes non-printable and unicode characters with\n        back-slashes, like \\b, \\t, \\n, \\f, \\r, \\\", \\\\,\n        \\xff, \\uffff.  If strictlyForJson is truthy,\n        does not use single-byte \\xff encoding.\n\n    enquote(string, strictlyForJson_opt)\n        produces a double-quoted, escaped version of the\n        given string.\n\n    expand(string, tabLength_opt)\n        converts all tabs in a string into a visually\n        equivalent number of spaces, assuming that the\n        text begins at column 0.\n        - tab length is 4 by default\n\n    trimBegin(string)\n        trims white space on the left side of a string\n\n    trimEnd(string)\n        trims white space on the right side of a string\n\n    trim(string)\n        trims white space on both sides of a string\n\n    padBegin(padding, length, pad_opt)\n        pads a string with the padding on the left, \"0\" by default\n        until it is at least length-long.\n        \n    padEnd(padding, length, pad_opt)\n        pads a string with the padding on the right, \"0\" by default\n        until it is at least length-long.\n        \n    splitName(string)\n        splits a name into a string of its component words,\n        regardless of the case convention.  Respects\n        acronyms as single words, such that:\n\n        >>> splitName(\"XMLHttpRequest\")\n        [\"XML\", \"Http\", \"Request\"]\n\n    joinName(delimiter, parts)\n        joins the words of a name into a single string,\n        using the given delimiter between numbers.\n        - if delimiter is undefined, it defaults to \"_\" \n    \n    upper(value, delimiter_opt)\n        returns an \"UPPERCASE\" or \"UPPER_CASE\" (if a delimiter is\n        provided) variant of the given string, regardless of the input\n        case convention.\n    \n    lower(value, delimiter_opt)\n        returns an \"lowercase\" or \"lower_case\" (if a delimiter is\n        provided) variant of the given string, regardless of the input\n        case convention.\n    \n    camel(value, delimiter_opt)\n        returns a \"camelCase\" variant of the given string, regardless\n        of its case convention.\n\n    title(value, delimiter_opt)\n        returns a \"TitleCase\" or \"Title Case\" (if a delimiter is\n        provided) variant of the given string, regardless of its\n        original case convention.\n\n",
  "readmeFilename": "README",
  "_id": "n-util@0.0.1",
  "dist": {
    "shasum": "4cf1df2660dc12e2f3d57f532698b835966bc41b"
  },
  "_from": "n-util@0.0.1",
  "_resolved": "https://registry.npmjs.org/n-util/-/n-util-0.0.1.tgz"
}
