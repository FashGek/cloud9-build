{
  "name": "zombie",
  "version": "0.12.14",
  "description": "Insanely fast, full-stack, headless browser testing using Node.js",
  "homepage": "http://zombie.labnotes.org/",
  "author": {
    "name": "Assaf Arkin",
    "email": "assaf@labnotes.org",
    "url": "http://labnotes.org/"
  },
  "contributors": [
    {
      "name": "Bob Lail",
      "email": "bob.lailfamily@gmail.com",
      "url": "http://boblail.tumblr.com/"
    },
    {
      "name": "Brian McDaniel",
      "url": "https://github.com/brianmcd"
    },
    {
      "name": "Damian Janowski"
    },
    {
      "name": "José Valim",
      "email": "jose.valim@plataformatec.com.br",
      "url": "http://blog.plataformatec.com.br/"
    }
  ],
  "keywords": [
    "test",
    "tests",
    "testing",
    "TDD",
    "spec",
    "specs",
    "BDD",
    "headless",
    "browser",
    "html",
    "html5",
    "dom",
    "css",
    "javascript",
    "integration",
    "ajax",
    "full-stack",
    "DSL"
  ],
  "main": "lib/zombie",
  "scripts": {
    "test": "vows --spec"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {
    "coffee-script": "~1.2",
    "jsdom": "~0.2.10",
    "mime": "~1.2.4",
    "ws": "~0.4.0"
  },
  "devDependencies": {
    "docco": "~0.3.0",
    "express": "~2.5.4",
    "highlight": "~0.2.0",
    "replay": "~1.2.3",
    "ronn": "~0.3.8",
    "vows": "~0.6.1"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/assaf/zombie"
  },
  "bugs": {
    "url": "http://github.com/assaf/zombie/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/assaf/zombie/blob/master/MIT-LICENSE"
    }
  ],
  "readme": "zombie.js(1) -- Insanely fast, headless full-stack testing using Node.js\n========================================================================\n\n\n## The Bite\n\nIf you're going to write an insanely fast, headless browser, how can you not call it Zombie?  Zombie it is.\n\nZombie.js is a lightweight framework for testing client-side JavaScript code in a simulated environment.  No browser\nrequired.\n\nLet's try to sign up to a page and see what happens:\n\n    var Browser = require(\"zombie\");\n    var assert = require(\"assert\");\n\n    // Load the page from localhost\n    browser = new Browser()\n    browser.visit(\"http://localhost:3000/\", function () {\n\n      // Fill email, password and submit form\n      browser.\n        fill(\"email\", \"zombie@underworld.dead\").\n        fill(\"password\", \"eat-the-living\").\n        pressButton(\"Sign Me Up!\", function() {\n\n          // Form submitted, new page loaded.\n          assert.ok(browser.success);\n          assert.equal(browser.text(\"title\"), \"Welcome To Brains Depot\");\n\n        })\n\n    });\n\nWell, that was easy.\n\n\n## Infection\n\nTo install Zombie.js you need Node.js, NPM, a C++ compiler and Python.\n\nOn OS X start by installing XCode, or use the [OSX GCC installer](https://github.com/kennethreitz/osx-gcc-installer)\n(less to download).\n\nNext, assuming you're using the mighty [Homebrew](http://mxcl.github.com/homebrew/):\n\n    $ brew install node\n    $ node --versi\")\n    v0.6.2\n    $ curl http://npmjs.org/install.sh | sudo sh\n    $ npm --version\n    1.0.106\n    $ npm install zombie\n\nOn Ubuntu try these steps:\n\n    $ sudo apt-get install python-software-properties\n    $ sudo add-apt-repository ppa:chris-lea/node.js\n    $ sudo apt-get update\n    $ sudo apt-get install nodejs nodejs-dev npm\n    $ node --version\n    v0.6.2\n    $ npm --version\n    1.0.106\n    $ npm install zombie\n\nOn Windows you'll need Cygwin to get access to GCC, Python, etc.  [Read\nthis](https://github.com/joyent/node/wiki/Building-node.js-on-Cygwin-(Windows)) for detailed instructions and\ntroubleshooting.\n\n\n## Walking\n\nTo start off we're going to need a browser.  A browser maintains state across requests: history, cookies, HTML 5 local\nand session stroage, etc.  A browser has a main window, and typically a document loaded into that window.\n\nYou can create a new `Browser` and point it at a document, either by setting the `location` property or calling\nits `visit` function.  As a shortcut, you can just call the `Browser.visit` function with a URL and callback:\n\n    Browser.visit(\"http://localhost:3000/\", function (e, browser) {\n      // The browser argument is an instance of Browser class\n      ...\n    })\n\nThe browser will load the document and if the document includes any scripts, also load and execute these scripts.  It\nwill then process some events, for example, anything your scripts do on page load.  All of that, just like a real\nbrowser, happens asynchronously.\n\nTo wait for the page to fully load and process events, you pass `visit` a callback function.  Zombie will then call your\ncallback with `null`, the browser object, the status code of the last response, and an array of errors (hopefully\nempty).  This is JavaScript, so you don't need to declare all these arguments, and in fact can access them as\n`browser.statusCode` and `browser.errors`.\n\n(Why would the first callback argument be `null`?  It works great when using asynchronous testing frameworks like\n[Vows.js](http://vowsjs.org/))\n\n\nMost errors that occur – resource loading and JavaScript execution – are not fatal, so rather the stopping processing,\nthey are collected in `browser.errors`.  As a convenience, you can get the last error by calling `browser.error`, for\nexample:\n\n    browser.visit(\"http://localhost:3000/\", function () {\n      assert.ok(browser.success);\n      if (browser.error )\n        console.dir(\"Errors reported:\", browser.errors);\n    })\n\nWhenever you want to wait for all events to be processed, just call `browser.wait` with a callback.  If you know how\nlong the wait is (e.g. animation or page transition), you can pass a duration (in milliseconds) as the first argument.\nYou can also pass a function that would return true when done.\n\nOtherwise, Zombie makes best judgement by waiting for about half a second for the page to load resources (scripts, XHR\nrequests, iframes), process DOM events, and fire timeouts events.  It is quite common for pages to fire timeout events\nas they load, e.g. jQuery's `onready`.  Usually these events delay the test by no more than a few milliseconds.\n\nRead more [on the Browser API](api)\n\n\n## Hunting\n\nThere are several ways you can inspect the contents of a document.  For starters, there's the [DOM\nAPI](http://www.w3.org/DOM/DOMTR), which you can use to find elements and traverse the document tree.\n\nYou can also use CSS selectors to pick a specific element or node list.  Zombie.js implements the [DOM Selector\nAPI](http://www.w3.org/TR/selectors-api/).  These functions are available from every element, the document, and the\n`Browser` object itself.\n\nTo get the HTML contents of an element, read its `innerHTML` property.  If you want to include the element itself with\nits attributes, read the element's `outerHTML` property instead.  Alternatively, you can call the `browser.html`\nfunction with a CSS selector and optional context element.  If the function selects multiple elements, it will return\nthe combined HTML of them all.\n\nTo see the textual contents of an element, read its `textContent` property.  Alternatively, you can call the\n`browser.text` function with a CSS selector and optional context element.  If the function selects multiple elements, it\nwill return the combined text contents of them all.\n\nHere are a few examples for checking the contents of a document:\n\n    // Make sure we have an element with the ID brains.\n    assert.ok(browser.query(\"#brains\"));\n\n    // Make sure body has two elements with the class hand.\n    assert.lengthOf(browser.body.queryAll(\".hand\"), 2);\n\n    // Check the document title.\n    assert.equal(browser.text(\"title\"), \"The Living Dead\");\n\n    // Show me the document contents.\n    console.log(browser.html());\n\n    // Show me the contents of the parts table:\n    console.log(browser.html(\"table.parts\"));\n\nCSS selectors are implemented by Sizzle.js.  In addition to CSS 3 selectors you get additional and quite useful\nextensions, such as `:not(selector)`, `[NAME!=VALUE]`, `:contains(TEXT)`, `:first/:last` and so forth.  Check out the\n[Sizzle.js documentation](https://github.com/jeresig/sizzle/wiki) for more details.\n\nRead more [on the Browser API](api) and [CSS selectors](selectors)\n\n\n## Feeding\n\nYou're going to want to perform some actions, like clicking links, entering text, submitting forms.  You can certainly\ndo that using the [DOM API](http://www.w3.org/DOM/DOMTR), or several of the convenience functions we're going to cover\nnext.\n\nTo click a link on the page, use `clickLink` with selector and callback.  The first argument can be a CSS selector (see\n_Hunting_), the `A` element, or the text contents of the `A` element you want to click.\n\nThe second argument is a callback, which much like the `visit` callback gets fired after all events are processed.\n\nLet's see that in action:\n\n    // Now go to the shopping cart page and check that we have\n    // three bodies there.\n    browser.clickLink(\"View Cart\", function(e, browser, status) {\n      assert.lengthOf(browser.queryAll(\"#cart .body\"), 3);\n    });\n\nTo submit a form, use `pressButton`.  The first argument can be a CSS selector, the button/input element. the button\nname (the value of the `name` argument) or the text that shows on the button.  You can press any `BUTTON` element or\n`INPUT` of type `submit`, `reset` or `button`.  The second argument is a callback, just like `clickLink`.\n\nOf course, before submitting a form, you'll need to fill it with values.  For text fields, use the `fill` function,\nwhich takes two arguments: selector and the field value.  This time the selector can be a CSS selector, the input\nelement, the field name (its `name` attribute), or the text that shows on the label associated with that field.\n\nZombie.js supports text fields, password fields, text areas, and also the new HTML 5 fields types like email, search and\nurl.\n\nThe `fill` function returns a reference to the browser, so you can chain several functions together.  Its sibling\nfunctions `check` and `uncheck` (for check boxes), `choose` (for radio buttons) and `select` (for drop downs) work the\nsame way.\n\nLet's combine all of that into one example:\n\n    // Fill in the form and submit.\n    browser.\n      fill(\"Your Name\", \"Arm Biter\").\n      fill(\"Profession\", \"Living dead\").\n      select(\"Born\", \"1968\").\n      uncheck(\"Send me the newsletter\").\n      pressButton(\"Sign me up\", function() {\n\n        // Make sure we got redirected to thank you page.\n        assert.equal(browser.location.pathname, \"/thankyou\");\n\n      });\n\nRead more [on the Browser API](api)\n\n\n## Readiness\n\nZombie.js supports the following:\n\n- HTML5 parsing and dealing with tag soups\n- [DOM Level 3](http://www.w3.org/DOM/DOMTR) implementation\n- HTML5 form fields (`search`, `url`, etc)\n- CSS3 Selectors with [some extensions](http://sizzlejs.com/)\n- Cookies and [Web Storage](http://dev.w3.org/html5/webstorage/)\n- `XMLHttpRequest` in all its glory\n- `setTimeout`/`setInterval`\n- `pushState`, `popstate` and `hashchange` events\n- `alert`, `confirm` and `prompt`\n\n\n## In The Family\n\n**[capybara-zombie](https://github.com/plataformatec/capybara-zombie)** -- Capybara driver for zombie.js running on top of node.\n\n**[zombie-jasmine-spike](https://github.com/mileskin/zombie-jasmine-spike)** -- Spike project for trying out Zombie.js with Jasmine\n\n**[Vows BDD](https://github.com/jmreidy/vows-bdd)** -- A BDD wrapper for Vows, allowing for easy writing of tests in a given-when-then format\n\n**[Mink](https://github.com/Behat/Mink)** -- PHP 5.3 acceptance test framework for web applications\n\n\n## Reporting Glitches\n\n**Step 1:** Run Zombie with debugging turned on, the trace will help figure out what it's doing. For example:\n\n    Browser.debug = true\n    var browser = new Browser()\n    browser.visit(\"http://thedead\", function() {\n      console.log(status, browser.errors);\n      ...\n    });\n\n**Step 2:** Wait for it to finish processing, then dump the current browser state:\n\n   browser.dump();\n\n**Step 3:** If publicly available, include the URL of the page you're trying to access.  Even better, provide a test\nscript I can run from the Node.js console (similar to step 1 above).\n\nRead more [about troubleshooting](troubleshoot)\n\n\n## Giving Back\n\n\n* Find [assaf/zombie on Github](http://github.com/assaf/zombie)\n* Fork the project\n* Add tests\n* Make your changes\n* Send a pull request\n\nRead more [about the guts of Zombie.js](guts) and check out the outstanding [to-dos](todo).\n\nFollow announcements, ask questions on [the Google Group](https://groups.google.com/forum/?hl=en#!forum/zombie-js)\n\nGet help on IRC: join [zombie.js on Freenode](irc://irc.freenode.net/zombie.js) or [web-based\nIRC](http://webchat.freenode.net/?channels=zombie-js)\n\n\n## Brains\n\nZombie.js is copyright of [Assaf Arkin](http://labnotes.org), released under the MIT License\n\nBlood, sweat and tears of joy:\n\n[Bob Lail boblail](http://boblail.tumblr.com/)\n\n[Brian McDaniel](https://github.com/brianmcd)\n\n[Damian Janowski aka djanowski](https://github.com/djanowski)\n\n[José Valim aka josevalim](http://blog.plataformatec.com.br/)\n\n[Justin Latimer](http://www.justinlatimer.com/)\n\nAnd all the fine people mentioned in [the changelog](changelog).\n\nZombie.js is written in [CoffeeScript](http://jashkenas.github.com/coffee-script/) for [Node.js](http://nodejs.org/)\n\nDOM emulation by Elijah Insua's [JSDOM](http://jsdom.org/)\n\nHTML5 parsing by Aria Stewart's [HTML5](https://github.com/aredridel/html5)\n\nCSS selectors by John Resig's [Sizzle.js](http://sizzlejs.com/)\n\nXPath support using Google's [AJAXSLT](http://code.google.com/p/ajaxslt/)\n\nJavaScript execution contexts using [Contextify](https://github.com/brianmcd/contextify)\n\nMagical Zombie Girl by [Toho Scope](http://www.flickr.com/people/tohoscope/)\n\n\n## See Also\n\n**zombie-api**(7), **zombie-troubleshoot**(7), **zombie-selectors**(7), **zombie-changelog**(7), **zombie-todo**(7)\n",
  "readmeFilename": "README.md",
  "_id": "zombie@0.12.14",
  "dist": {
    "shasum": "f72b64a76dbdcbe32e5b60b5974af61236a2fab3"
  },
  "_from": "zombie@0.12.14",
  "_resolved": "https://registry.npmjs.org/zombie/-/zombie-0.12.14.tgz"
}
